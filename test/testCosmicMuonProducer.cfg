process MuonC = {

   include "RecoTracker/SingleTrackPattern/test/services.cfi"
   #include "RecoMuon/CosmicMuonProducer/test/cosmicSource.cfi"
   include "RecoTracker/SingleTrackPattern/test/cosmicGen.cfi"

   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"

   #Magnetic Field
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   #non-beam Oscar Producer 
   include "RecoTracker/SingleTrackPattern/test/nonbeamOscarProducer.cfi"

   # Digitization of the simulated hits

   # CSC
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "SimMuon/CSCDigitizer/data/muoncscdigi.cfi"

   # DT
   include "Geometry/DTGeometry/data/dtGeometry.cfi"
   include "SimMuon/DTDigitizer/data/muondtdigi.cfi"

   # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !

   module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         untracked vstring fileNames =
#         {'file:simevent.root' }
#         string type = "poisson"
#         double averageNumber = 3  # setting this param. to 0 means "No pile-up",
                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }

#
# Muon Segments
#
   ## CSC
   include "RecoLocalMuon/CSCRecHit/data/CSCRecHit2DProducer.cfi"
   include "RecoLocalMuon/CSCSegment/data/CSCSegmentProducer.cfi"

   ## DT
   include "RecoLocalMuon/DTRecHit/data/DTRecHit1DProducer_ParamDrift.cfi"
   include "RecoLocalMuon/DTSegment/data/DTSegment2DProducer_CombPatternReco2D_ParamDrift.cfi"
   include "RecoLocalMuon/DTSegment/data/DTSegment4DProducer_CombPatternReco4D_ParamDrift.cfi"

   ## Geometry
   include "Geometry/CommonDetUnit/data/globalTrackingGeometry.cfi"

   es_module = MuonDetLayerGeometryESProducer { }

   ## Propagator
   include "TrackPropagation/SteppingHelixPropagator/data/SteppingHelixPropagatorAny.cfi"

   ## Estimator
 #  include "TrackingTools/KalmanUpdators/data/Chi2MeasurementEstimatorESProducer.cfi"

   include "RecoMuon/MuonSeedGenerator/data/CosmicMuonSeedProducer.cfi"
   include "RecoMuon/CosmicMuonProducer/data/CosmicMuonProducer.cfi"

   # Output module
   #
   module output = PoolOutputModule
   {
      untracked string fileName = "/tmp/MCCosMuons.root"
   }
   # Now order modules for execution
   #
   sequence muonDigi = { muoncscdigi & muondtdigi }

   sequence muonReco = { CSCRecHit2DProducer &  CSCSegmentProducer &  DTRecHit1DProducer &  DTSegment2DProducer &  DTSegment4DProducer}

   path p1 = {SimG4Object, mix, muonDigi, muonReco, CosmicMuonSeed, CosmicMuon}
   endpath outpath = { output }

}
